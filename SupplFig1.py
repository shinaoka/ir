import numpy as npimport matplotlib.pylab as pltimport pylabfrom kernel import KernelBasisDEfrom scipy.special import legendreparams = {    'backend': 'ps',    'axes.labelsize': 18,    'text.fontsize': 18,    'axes.titlesize': 18,    'legend.fontsize': 18,    'xtick.labelsize': 18,    'ytick.labelsize': 18,    'text.usetex': True,    }pylab.rcParams.update(params)N = 1001il_list = [0, 1, 2, 3]marker_list = ['o', 'x', '+', 'v']marker_list = ['+', 'v', 'o', 'v']color_list = ['b', 'r', 'g', 'k']wmax_list = [0.1, 1.0, 5.0]#wmax_list = [0.05, 0.1, 0.2]ls_list = ['-', ':', '--']ikernel = 0for kernel in ['Fermionic', 'Bosonic']:    f, axes = plt.subplots(len(il_list), 2, figsize=(10, 12), sharex=True, sharey=False)    f.subplots_adjust(wspace=0.25, hspace=0.1, right = 0.98, top=0.95)    axes = axes.transpose()    for il in range(len(il_list)):        axes[0,il].plot([-1,1], [0, 0], label='', marker='', color='k', ls='-', lw=0.5)        axes[1,il].plot([-1,1], [0, 0], label='', marker='', color='k', ls='-', lw=0.5)        axes[0,il].set_title(r"$l="+str(il)+'$')        axes[1,il].set_title(r"$l="+str(il)+'$')    iwmax = 0    for wmax in wmax_list:        kb = KernelBasisDE(N, N, wmax, 1e-12, kernel=kernel)        for il in il_list:            lg = legendre(il)            label_str = r'$\Lambda='+str(wmax)+'$'            if il != 1:                label_str = ''            y = lg(kb.x_points())            axes[0,il].plot(kb.x_points(), (kb.x_basis()[:,il]/kb.x_basis()[-1,il] - y/y[-1]), label=label_str, marker='', color=color_list[iwmax], ls=ls_list[iwmax], lw=2)            y = lg(kb.omega_points()/wmax)            axes[1,il].plot(kb.omega_points()/wmax, (kb.omega_basis()[:,il]/kb.omega_basis()[-1,il] - y/y[-1]), label=label_str, marker='', color=color_list[iwmax], ls=ls_list[iwmax], lw=2)            axes[0,il].set_xlim([-1,1])            axes[1,il].set_xlim([-1,1])            #axes[0,il].set_yscale("log")            #axes[1,il].set_yscale("log")        iwmax += 1    for il in range(len(il_list)-1):        plt.setp(axes[ikernel,il].get_xticklabels(), visible=False)    ikernel += 1    for il in range(len(il_list)):        axes[0,il].set_ylabel('$u_l(x)/u_l(1) - P_l(x)/P_l(1)$')        axes[1,il].set_ylabel('$v_l(y)/v_l(1) - P_l(y)/P_l(1)$')        axes[0,-1].set_xlabel('$x$')    axes[1,-1].set_xlabel('$y$')        axes[0,1].legend(loc='best',shadow=True,frameon=False)    axes[1,1].legend(loc='best',shadow=True,frameon=False)        plt.tight_layout()    plt.savefig("SupplFig1"+kernel[0]+".pdf", transparent=True)