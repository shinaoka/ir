import numpy as npimport matplotlib.pylab as pltimport pylabfrom kernel import KernelBasisDEfrom scipy.special import legendrefrom matplotlib.legend_handler import HandlerLine2Dparams = {    'backend': 'ps',    'axes.labelsize': 21,    'text.fontsize': 21,    'axes.titlesize': 21,    'legend.fontsize': 21,    'xtick.labelsize': 21,    'ytick.labelsize': 21,    'text.usetex': True,    }pylab.rcParams.update(params)def find_zeros(x, y):    r = []    for i in range(len(y)-1):        if y[i] * y[i+1] < 0:            zero = (x[i] * np.abs(y[i+1]) + x[i+1] * np.abs(y[i]))/(np.abs(y[i]) + np.abs(y[i+1]))            r.append(zero)    return np.array(r)results = []#plt.figure(1, figsize=(10, 4))f, axes = plt.subplots(1, 2, sharex=False, sharey=True, figsize=(8,5))N = 1001#marker_list = ['o', 'x', '+', 'v']marker_list = ['x', 'o', 'v', 'v']color_list = ['b', 'r', 'g', 'k']wmax_list = [100.0, 10000.0]ls_list = ['-', ':', ':']#ax1 = plt.subplot(1,2,1)#ax2 = plt.subplot(1,2,2, sharey=ax1)ikernel = 0handler_map = {}for kernel in ['Fermionic', 'Bosonic']:    #plt.subplot(1,2,ikernel+1)    data = {}    iwmax = 0    for wmax in wmax_list:        kb = KernelBasisDE(N, N, wmax, 1e-12, kernel=kernel)        h, = axes[ikernel].plot(kb.s/kb.s[0] * 10**iwmax, label=r"$\Lambda="+str(int(wmax))+r"$", marker=marker_list[iwmax], color=color_list[iwmax], ls=ls_list[iwmax], ms=4)        handler_map[h] = HandlerLine2D(numpoints=1)        iwmax += 1    axes[ikernel].set_title(kernel)    axes[ikernel].set_xlabel(r"$l$")    if ikernel == 0:        axes[ikernel].set_ylabel(r"$s_l/s_0$")    axes[ikernel].set_yscale("log")    axes[ikernel].set_xlim([0,70])    axes[ikernel].set_ylim([1E-10,1000])    ikernel += 1f.subplots_adjust(wspace=0)plt.setp([a.get_yticklabels() for a in f.axes[1:]], visible=False)for ikernel in range(2):    axes[ikernel].legend(loc='best',shadow=True,frameon=False, handler_map=handler_map)#plt.setp(ax2.get_xticklabels(), visible=False)plt.tight_layout()plt.savefig("Fig2a.pdf", transparent=True)